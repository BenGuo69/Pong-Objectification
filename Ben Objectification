import time, sys, random

class Hero():
    def __init__(self, energy, attack, gold, weapon):
        self.energy = energy
        self.attack = attack
        self.gold = gold
        self.weapon = weapon
        self.weapon_array = ["bare fists", "bow", "dagger", "sword", "longsword"]

    def update_energy(self, e_diff):
        self.energy += e_diff

    def update_gold(self, g_diff):
        self.gold += g_diff

    def update_attack(self, a_diff):
        self.attack += a_diff

    def equip_weapon(self, weapon_num):
        self.weapon = weapon_num

def check_input(range):
    while True:
        response = raw_input().lower()

        try:
            response =  int(response)

            if 0 > response or response > range:
                print_delay("Please insert within range!")
            else:
                return response

        except ValueError:
            print_delay("You have to enter a number!")

def print_delay(sent):
    for letter in sent:
        time.sleep(0.03)
        sys.stdout.write(letter)

    print "\n"

def loot_escape(h):
    h.update_gold(150)
    print_delay("Hero has looted his parents gil.")
    print_delay("Gil increased to " + str(h.gold) + "!")
    print_delay("As hero runs towards the secret cave at the bottom of the dried up well.")
    print_delay("As Hero turns a corner, he is met by three townsmen running towards the gate.")
    print_delay("'All those not for us are against us!', yell the men.")
    print_delay("The lead man barrel rolls unexpectantly 3 meters before Hero.")
    print_delay("Hero perceives a movement too quick to see anything but a flash the color of worn tunic.")
    print_delay("Hero sees all blue and realizes he is on his back looking at the sky, bleeding from his stomach...")
    print_delay("Hero's " + str(h.gold) + " gil is taken from him...")
    h.update_gold(-h.gold)
    print_delay("Hero now has " + str(h.gold) + " gils.")
    h.update_energy(-150)
    print_delay("Hero's energy has decreased to " + str(h.energy) + ".")
    check_death(h)

def defend_gate(h):
    h.equip_weapon(2)
    print_delay("Hero has equipped his " + str(h.weapon_array[h.weapon]) + ".")
    print_delay("Attack with all your might men! Your women and children are at stake!")
    print_delay("An ogre approaches...")
    print_delay("What would you like to do?")
    print_delay("1. Barrel roll and thrust your Dagger into his liver.")
    print_delay("2. Dodge to the left and slice the Ogre's abdomen.")
    print_delay("3. Push the fellow townsman on your left into the path of the oncoming Ogre.\n")

    choice = check_input(3)

    if choice == 1:
        attack(h)
    elif choice == 2:
        slide(h)
    else:
        lols(h)

def attack(h):
    print_delay("The ogre's skin was too thick to pierce")
    print_delay("He strikes you in the head")
    h.update_energy(-200)
    check_death(h)
    print_delay("This line won't do anything cause ur dead no matter what right now lel")

def slide(h):
    print_delay("He falls down from a bleeding abdomen and his life drains away.")
    h.update_energy(random.randrange(0, 100))
    if h.energy >= 150:
        print_delay("You have leveled up with " + str(h.energy) + " energy!")
        print_delay("You release a mind shockwave which kills every ogre and saves the village.")
        print_delay("The end")
    elif h.energy < 150:
        print_delay("Killing the ogre also resulted in a broken wrist...")
        print_delay("The other ogres overwhelm you at once")
        h.update_energy(-150)
        check_death(h)

def lols(h):
    print_delay("The ogre stomps the townsman to pieces of bright-red flesh and roars triumphantly")
    print_delay("Realizing what you've done, Hero's eyes turn red and Hero's attack increases from " + str(h.attack) + " to " + str(h.attack + 50) + "!")
    print_delay("Hero charges at the ogre and tears him to pieces")
    h.update_attack(100)
    print_delay("Hero goes on a rampage by increasing his attack once more, now at a level of " + str(h.attack) + " attack points.")
    print_delay("Hero flashes though the town ending every ogre's life...")
    h.update_energy(-h.energy)
    print_delay("Every ogre has been killed. yet Hero's energy has declined greatly, now at " + str(h.energy) + " energy.")
    check_death(h)

def run(h):
    print_delay("Forgetting to put on his tunic, Hero runs for the hills towards the east side of town.")
    print_delay("Hero makes it over the village wall.")
    print_delay("Hero runs up a stream to in an effort hide his scent from the marauding Ogres.")
    print_delay("Hero takes a breather by a blueberry bush upstream.")
    print_delay("Hero drinks some fresh water.")
    h.update_energy(30)
    print_delay("Hero's energy goes up to " + str(h.energy) + ".")
    print_delay("Hero eats a handful of blueberries found by the stream.")
    print_delay("They have a bitter aftertaste! Poisonous hollyberries!")
    h.update_energy(-25)
    print_delay("Hero's energy goes down to " + str(h.energy) + ".")
    check_death(h)
    print_delay("Hero is forced to lay down and take a nap.")
    print_delay("......")
    print_delay("......")
    print_delay("......")
    print_delay("Hero wakes up inside Ogre's cooking pot, boiled alive.")
    h.update_energy(-200)
    print_delay("Hero's energy has decreased to " + str(h.energy) + ".")
    check_death(h)

def check_death(h):
    if h.energy <= 0:
        print_delay("Rip Jojo.......")
        sys.exit()

def main():
    hero = Hero(100, 50, 20, 0)
    print_delay("The hero has started with " + str(hero.energy) + " energy!")
    print_delay("Hero wakes up on a sunny day in his bedroom.")
    print_delay("Jojo! Jojo! Wake up! Ogres are attacking the village!")
    print_delay("What does the hero do?")
    print_delay("1. Run for the hills.")
    print_delay("2. Grab your dagger and help the men at the gate.")
    print_delay("3. Grab your parents sack of gold and escape down the well.\n")

    choice = check_input(3)

    if choice == 1:
        run(hero)
    elif choice == 2:
        defend_gate(hero)
    else:
        loot_escape(hero)


if __name__ == "__main__":
    main()
